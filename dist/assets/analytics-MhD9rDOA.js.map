{"version":3,"file":"analytics-MhD9rDOA.js","sources":["../../src/stores/analytics.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport type {\n  ScrapedPost, \n  ScraperStatus, \n  SentimentDataPoint,\n  KeywordDataPoint,\n  PlatformDataPoint,\n  BrandRating,\n  BrandRatingStatus,\n  AnalyticsFilters\n} from '@/types/analytics'\nimport axios from '@/lib/axios'\n\nexport const useAnalyticsStore = defineStore('analytics', () => {\n  // State\n  const posts = ref<ScrapedPost[]>([])\n  const allPosts = ref<ScrapedPost[]>([]) // Full dataset for calculations\n  const scraperStatus = ref<ScraperStatus | null>(null)\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  const brandRating = ref<BrandRating | null>(null)\n  const brandRatingStatus = ref<'idle' | 'loading' | 'calculating' | 'error'>('idle')\n  const brandRatingError = ref<string | null>(null)\n\n  // Filter State\n  const filters = ref<AnalyticsFilters>({\n    dateRange: {\n      // Use UTC-aligned dates to match backend\n      start: new Date(new Date().setUTCHours(0, 0, 0, 0) - 30 * 24 * 60 * 60 * 1000),\n      end: new Date(new Date().setUTCHours(23, 59, 59, 999))\n    },\n    platforms: [],\n    visibleSentiments: {\n      positive: true,\n      neutral: true,\n      negative: true\n    },\n    timeFrame: '30d', // Default to 30d view\n    minMentions: 0,\n    sortBy: 'mentions'\n  })\n\n  // Getters\n  const filteredPosts = computed(() => {\n    if (!posts.value) return []\n\n    return posts.value.filter(post => {\n      // Date range filter\n      const postDate = new Date(post.post_date)\n      if (postDate < filters.value.dateRange.start || postDate > filters.value.dateRange.end) {\n        return false\n      }\n\n      // Platform filter\n      if (filters.value.platforms.length > 0 && !filters.value.platforms.includes(post.source)) {\n        return false\n      }\n\n      return true\n    })\n  })\n\n  // Graph data from API\n  const graphData = ref<SentimentDataPoint[]>([])\n\n  const sentimentOverTime = computed((): SentimentDataPoint[] => {\n    return graphData.value\n  })\n\n  // Server-provided stats\n  const keywordStats = ref<KeywordDataPoint[]>([])\n  const platformStats = ref<PlatformDataPoint[]>([])\n\n  const keywordAnalysis = computed((): KeywordDataPoint[] => {\n    if (!allPosts.value || allPosts.value.length === 0) return []\n\n    const keywordSourceStats = allPosts.value.reduce((acc, post) => {\n      if (!post.keyword_term || !post.source) return acc\n      \n      // Apply date filter\n      const postDate = new Date(post.post_date)\n      if (postDate < filters.value.dateRange.start || postDate > filters.value.dateRange.end) {\n        return acc\n      }\n\n      const key = `${post.keyword_term}|${post.source}`\n      if (!acc[key]) {\n        acc[key] = {\n          id: post.keyword_id,\n          keyword: post.keyword_term,\n          source: post.source,\n          mentions: 0,\n          positive: 0,\n          neutral: 0,\n          negative: 0\n        }\n      }\n\n      const stats = acc[key]\n      stats.mentions++\n      if (post.sentiment) {\n        stats[post.sentiment]++\n      }\n\n      return acc\n    }, {} as Record<string, KeywordDataPoint>)\n\n    let keywordStats = Object.values(keywordSourceStats)\n      .filter(stat => stat.mentions >= filters.value.minMentions)\n\n    if (filters.value.platforms.length === 0) {\n      const aggregatedStats = keywordStats.reduce((acc, stat) => {\n        if (!acc[stat.keyword]) {\n          acc[stat.keyword] = {\n            id: stat.id,\n            keyword: stat.keyword,\n            mentions: 0,\n            positive: 0,\n            neutral: 0,\n            negative: 0,\n            source: 'all'\n          }\n        }\n\n        const aggregate = acc[stat.keyword]\n        aggregate.mentions += stat.mentions\n        aggregate.positive += stat.positive\n        aggregate.neutral += stat.neutral\n        aggregate.negative += stat.negative\n\n        return acc\n      }, {} as Record<string, KeywordDataPoint>)\n\n      keywordStats = Object.values(aggregatedStats)\n    } else {\n      keywordStats = keywordStats.filter(stat =>\n        filters.value.platforms.includes(stat.source)\n      )\n    }\n\n    return keywordStats.sort((a, b) => {\n      if (filters.value.sortBy === 'mentions') {\n        return b.mentions - a.mentions\n      } else if (filters.value.sortBy === 'sentiment') {\n        const aPositiveRate = a.mentions > 0 ? a.positive / a.mentions : 0\n        const bPositiveRate = b.mentions > 0 ? b.positive / b.mentions : 0\n        return bPositiveRate - aPositiveRate\n      } else { // growth\n        return b.mentions - a.mentions\n      }\n    })\n  })\n\n  const platformSummary = computed((): PlatformDataPoint[] => platformStats.value)\n\n  const keywordCorrelation = computed(() => {\n    const stats = keywordAnalysis.value\n    return stats.map(stat => ({\n      keyword: stat.keyword,\n      positive: stat.mentions > 0 ? stat.positive / stat.mentions : 0,\n      neutral: stat.mentions > 0 ? stat.neutral / stat.mentions : 0,\n      negative: stat.mentions > 0 ? stat.negative / stat.mentions : 0\n    }))\n  })\n\n  // Memoize filtered posts\n  const filteredDatePosts = computed(() => {\n    if (!allPosts.value) return []\n    return allPosts.value.filter(post => {\n      const postDate = new Date(post.post_date)\n      return postDate >= filters.value.dateRange.start && postDate <= filters.value.dateRange.end\n    })\n  })\n\n  // Memoize sentiment counts\n  const sentimentCounts = computed(() => {\n    const counts = {\n      positive: 0,\n      negative: 0,\n      neutral: 0,\n      total: 0\n    }\n    \n    filteredDatePosts.value.forEach(post => {\n      counts.total++\n      if (post.sentiment) {\n        counts[post.sentiment]++\n      } else {\n        counts.neutral++\n      }\n    })\n    \n    return counts\n  })\n\n  // Use memoized values for stats\n  const overallStats = computed(() => {\n    if (!allPosts.value) return null\n\n    const counts = sentimentCounts.value\n    const calculatePercentage = (value: number) =>\n      counts.total > 0 ? Math.round((value / counts.total) * 100) : 0\n\n    return {\n      totalMentions: counts.total,\n      positiveSentiment: calculatePercentage(counts.positive),\n      negativeSentiment: calculatePercentage(counts.negative),\n      neutralSentiment: calculatePercentage(counts.neutral)\n    }\n  })\n\n  // Cache constants\n  const CACHE_KEY = 'vueleaf_analytics_data'\n  const CACHE_DURATION = 900000 // 15 minutes\n  const REFRESH_THRESHOLD = 60000 // 1 minute\n\n  function updateStoreData(data: any, status: any) {\n    posts.value = data.results || []\n    allPosts.value = data.all_posts || []\n    scraperStatus.value = status || null\n    graphData.value = data.graph_data || []\n    keywordStats.value = data.keyword_stats || []\n    platformStats.value = data.platform_stats || []\n    // Active keywords count is now managed by tracking store\n  }\n\n  async function fetchFreshData(params: any) {\n    const [postsResponse, statusResponse] = await Promise.all([\n      axios.get('/posts/', { params }),\n      axios.get('/logs/status/')\n    ])\n\n    // Save to cache\n    localStorage.setItem(CACHE_KEY, JSON.stringify({\n      data: postsResponse.data,\n      status: statusResponse.data,\n      timestamp: Date.now(),\n      params: params // Store params to validate cache\n    }))\n\n    return { postsResponse, statusResponse }\n  }\n\n  // Actions\n  async function fetchAnalyticsData() {\n    error.value = null\n\n    // Format dates for API\n    const formatDate = (date: Date) => {\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      return `${year}-${month}-${day}`\n    }\n\n    const params = {\n      start_date: formatDate(filters.value.dateRange.start),\n      end_date: formatDate(filters.value.dateRange.end),\n      platforms: filters.value.platforms,\n      min_mentions: filters.value.minMentions\n    }\n\n    // Check cache first\n    const cached = localStorage.getItem(CACHE_KEY)\n    if (cached) {\n      const { data, status, timestamp, params: cachedParams } = JSON.parse(cached)\n      const isRecent = Date.now() - timestamp < CACHE_DURATION\n      const paramsMatch = JSON.stringify(params) === JSON.stringify(cachedParams)\n      \n      if (isRecent && paramsMatch) {\n        // Use cached data immediately\n        updateStoreData(data, status)\n        \n        // Refresh in background if needed\n        if (Date.now() - timestamp > REFRESH_THRESHOLD) {\n          fetchFreshData(params).then(({ postsResponse, statusResponse }) => {\n            updateStoreData(postsResponse.data, statusResponse.data)\n          }).catch(console.error)\n        }\n        \n        return\n      }\n    }\n\n    // No cache or expired or params changed, fetch fresh\n    isLoading.value = true\n    try {\n      const { postsResponse, statusResponse } = await fetchFreshData(params)\n      updateStoreData(postsResponse.data, statusResponse.data)\n    } catch (e) {\n      console.error('Error fetching analytics data:', e)\n      error.value = 'Failed to fetch analytics data'\n      posts.value = []\n      scraperStatus.value = null\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  async function fetchBrandRating(keywordId: number): Promise<BrandRatingStatus | null> {\n    try {\n      const timestamp = new Date().getTime()\n      const response = await axios.get(`/brand-ratings/${keywordId}/status/?t=${timestamp}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        }\n      })\n      const data: BrandRatingStatus = response.data\n\n      switch (data.status) {\n        case 'error':\n          brandRatingStatus.value = 'error'\n          brandRatingError.value = data.message || 'Failed to fetch brand rating'\n          return data\n\n        case 'calculating':\n          brandRatingStatus.value = 'calculating'\n          if (data.result) {\n            brandRating.value = data.result\n          }\n          return data\n\n        case 'completed':\n          if (data.result) {\n            brandRatingStatus.value = 'idle'\n            brandRating.value = data.result\n          }\n          return data\n\n        default:\n          // Not calculated or invalid status, start calculation\n          return calculateBrandRating(keywordId)\n      }\n    } catch (e) {\n      console.error('Error fetching brand rating:', e)\n      brandRatingStatus.value = 'error'\n      brandRatingError.value = 'Failed to fetch brand rating'\n      return null\n    }\n  }\n\n  async function calculateBrandRating(keywordId: number): Promise<BrandRatingStatus | null> {\n    brandRatingStatus.value = 'calculating'\n    brandRatingError.value = null\n    \n    try {\n      const response = await axios.post(`/brand-ratings/${keywordId}/calculate/`, null, {\n        params: { return_status: true }\n      })\n      \n      const data: BrandRatingStatus = response.data\n\n      switch (data.status) {\n        case 'error':\n          brandRatingStatus.value = 'error'\n          brandRatingError.value = data.message || 'Failed to calculate brand rating'\n          break\n\n        case 'completed':\n          if (data.result) {\n            brandRatingStatus.value = 'idle'\n            brandRating.value = data.result\n          }\n          break\n\n        case 'calculating':\n          brandRatingStatus.value = 'calculating'\n          if (data.result) {\n            brandRating.value = data.result\n          }\n          break\n      }\n      \n      return data\n    } catch (e) {\n      console.error('Error calculating brand rating:', e)\n      brandRatingStatus.value = 'error'\n      brandRatingError.value = 'Failed to calculate brand rating'\n      return null\n    }\n  }\n\n  // Filter Actions\n  function updateFilters(newFilters: Partial<AnalyticsFilters>) {\n    filters.value = {\n      ...filters.value,\n      ...newFilters\n    }\n    fetchAnalyticsData()\n  }\n\n  function resetFilters() {\n    filters.value = {\n      dateRange: {\n        // Use UTC-aligned dates to match backend\n        start: new Date(new Date().setUTCHours(0, 0, 0, 0) - 30 * 24 * 60 * 60 * 1000),\n        end: new Date(new Date().setUTCHours(23, 59, 59, 999))\n      },\n      platforms: [],\n      visibleSentiments: {\n        positive: true,\n        neutral: true,\n        negative: true\n      },\n      timeFrame: '90d', // Reset to 90d view\n      minMentions: 0,\n      sortBy: 'mentions'\n    }\n    fetchAnalyticsData()\n  }\n\n  return {\n    // State\n    posts,\n    scraperStatus,\n    isLoading,\n    error,\n    filters,\n    brandRating,\n    brandRatingStatus,\n    brandRatingError,\n    graphData,\n\n    // Getters\n    sentimentOverTime,\n    keywordAnalysis,\n    platformSummary,\n    keywordCorrelation,\n    overallStats,\n\n    // Actions\n    fetchAnalyticsData,\n    fetchBrandRating,\n    calculateBrandRating,\n    updateFilters,\n    resetFilters\n  }\n})\n"],"names":["useAnalyticsStore","defineStore","posts","ref","allPosts","scraperStatus","isLoading","error","brandRating","brandRatingStatus","brandRatingError","filters","computed","post","postDate","graphData","sentimentOverTime","keywordStats","platformStats","keywordAnalysis","keywordSourceStats","acc","key","stats","stat","aggregatedStats","aggregate","a","b","aPositiveRate","platformSummary","keywordCorrelation","filteredDatePosts","sentimentCounts","counts","overallStats","calculatePercentage","value","CACHE_KEY","CACHE_DURATION","REFRESH_THRESHOLD","updateStoreData","data","status","fetchFreshData","params","postsResponse","statusResponse","axios","fetchAnalyticsData","formatDate","date","year","month","day","cached","timestamp","cachedParams","isRecent","paramsMatch","e","fetchBrandRating","keywordId","calculateBrandRating","updateFilters","newFilters","resetFilters"],"mappings":"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"}