{"version":3,"file":"useMentions-CYyz5hpG.js","sources":["../../src/components/common/Pagination.vue","../../src/composables/useMentions.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { ChevronLeft, ChevronRight } from 'lucide-vue-next'\r\n\r\nconst props = defineProps<{\r\n  currentPage: number\r\n  totalPages: number\r\n}>()\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'update:currentPage', value: number): void\r\n}>()\r\n\r\nfunction changePage(page: number) {\r\n  emit('update:currentPage', page)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex items-center justify-center gap-2 py-4\">\r\n    <!-- Previous button -->\r\n    <button\r\n      class=\"flex items-center justify-center h-10 w-10 rounded bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n      :disabled=\"currentPage === 1\"\r\n      @click=\"changePage(currentPage - 1)\"\r\n    >\r\n      <ChevronLeft class=\"w-5 h-5\" />\r\n    </button>\r\n\r\n    <!-- First page -->\r\n    <button \r\n      v-if=\"totalPages > 0\"\r\n      class=\"flex items-center justify-center h-10 min-w-[40px] px-2 rounded text-base transition-colors\"\r\n      :class=\"currentPage === 1 \r\n        ? 'bg-emerald-100 text-emerald-700 font-medium' \r\n        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\"\r\n      @click=\"changePage(1)\"\r\n    >\r\n      1\r\n    </button>\r\n\r\n    <!-- Middle pages -->\r\n    <template v-for=\"page in totalPages\" :key=\"page\">\r\n      <button\r\n        v-if=\"page !== 1 && page !== totalPages && Math.abs(currentPage - page) <= 2\"\r\n        class=\"flex items-center justify-center h-10 min-w-[40px] px-2 rounded text-base transition-colors\"\r\n        :class=\"page === currentPage \r\n          ? 'bg-emerald-100 text-emerald-700 font-medium' \r\n          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\"\r\n        @click=\"changePage(page)\"\r\n      >\r\n        {{ page }}\r\n      </button>\r\n    </template>\r\n\r\n    <!-- Ellipsis -->\r\n    <span v-if=\"currentPage < totalPages - 3\" class=\"px-2 text-gray-500\">...</span>\r\n\r\n    <!-- Last page -->\r\n    <button \r\n      v-if=\"totalPages > 1\"\r\n      class=\"flex items-center justify-center h-10 min-w-[40px] px-2 rounded text-base transition-colors\"\r\n      :class=\"currentPage === totalPages \r\n        ? 'bg-emerald-100 text-emerald-700 font-medium' \r\n        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\"\r\n      @click=\"changePage(totalPages)\"\r\n    >\r\n      {{ totalPages }}\r\n    </button>\r\n\r\n    <!-- Next button -->\r\n    <button \r\n      class=\"flex items-center justify-center h-10 w-10 rounded bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n      :disabled=\"currentPage === totalPages\"\r\n      @click=\"changePage(currentPage + 1)\"\r\n    >\r\n      <ChevronRight class=\"w-5 h-5\" />\r\n    </button>\r\n  </div>\r\n</template>","import { ref, computed } from 'vue'\nimport axios from '@/lib/axios'\n\nexport interface GraphDataPoint {\n  date: string\n  positive: number\n  negative: number\n  neutral: number\n}\n\nexport interface Mention {\n  id: number\n  keyword_term: string\n  title: string\n  content: string\n  url: string\n  author: string\n  source: string\n  post_date: string\n  created_at: string\n  sentiment: 'positive' | 'neutral' | 'negative' | null\n  sentiment_confidence?: number\n}\n\nexport interface PaginatedResponse {\n  count: number\n  next: string | null\n  previous: string | null\n  results: Mention[]\n  total_pages: number\n  current_page: number\n  stats: {\n    positive: number\n    negative: number\n    neutral: number\n    keywords: string[]\n  }\n  graph_data: GraphDataPoint[]\n}\n\nexport function useMentions() {\n  // Add cache map\n  const responseCache = ref(new Map<string, {\n    data: PaginatedResponse\n    timestamp: number\n  }>())\n\n  const mentions = ref<Mention[]>([])\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  const totalCount = ref(0)\n  const totalPages = ref(0)\n\n  // Stats and graph data from API response\n  const stats = ref({\n    positive: 0,\n    negative: 0,\n    neutral: 0,\n    keywords: [] as string[]\n  })\n  const graphData = ref<GraphDataPoint[]>([])\n  const availableKeywords = ref<string[]>([])\n\n  // Computed stats\n  const totalMentions = computed(() => totalCount.value)\n  const positiveMentions = computed(() => stats.value.positive)\n  const negativeMentions = computed(() => stats.value.negative)\n  const neutralMentions = computed(() => stats.value.neutral)\n\n  interface FetchParams {\n    page?: number\n    start_date?: string\n    end_date?: string\n    platforms?: string\n    sentiment?: string\n    keyword?: string\n    search?: string\n    ordering?: string  // Parameter name used by API endpoints for sorting\n  }\n\n  // Initialize mentions ref\n  mentions.value = []\n\n  // Fetch mentions with optional filters and caching\n  const fetchMentions = async (filters: FetchParams = {}) => {\n    const cacheKey = JSON.stringify(filters)\n    const cached = responseCache.value.get(cacheKey)\n    \n    // Use cache if less than 5 minutes old\n    if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {\n      mentions.value = cached.data.results\n      totalCount.value = cached.data.count\n      totalPages.value = cached.data.total_pages\n      stats.value = cached.data.stats\n      graphData.value = cached.data.graph_data\n      availableKeywords.value = cached.data.stats.keywords\n      return\n    }\n\n    isLoading.value = true\n    error.value = null\n    try {\n      console.log('Sending filters to API:', filters)\n      const response = await axios.get<PaginatedResponse>('/posts/', { params: filters })\n      console.log('API Response:', response.data)\n      \n      // Cache the response\n      responseCache.value.set(cacheKey, {\n        data: response.data,\n        timestamp: Date.now()\n      })\n      \n      mentions.value = response.data.results\n      totalCount.value = response.data.count\n      totalPages.value = response.data.total_pages\n      stats.value = response.data.stats\n      graphData.value = response.data.graph_data\n      availableKeywords.value = response.data.stats.keywords\n    } catch (err) {\n      error.value = 'Failed to fetch mentions'\n      console.error('Error fetching mentions:', err)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  // Retry sentiment analysis for a specific mention\n  const retrySentiment = async (mentionId: number) => {\n    try {\n      const response = await axios.post(`/posts/${mentionId}/retry-sentiment/`)\n      \n      // Update the mention in the local state\n      const index = mentions.value.findIndex(m => m.id === mentionId)\n      if (index !== -1) {\n        mentions.value[index] = {\n          ...mentions.value[index],\n          sentiment: response.data.sentiment,\n          sentiment_confidence: response.data.sentiment_confidence\n        }\n      }\n      \n      return response.data\n    } catch (err) {\n      console.error('Error retrying sentiment analysis:', err)\n      throw err\n    }\n  }\n\n  return {\n    // State\n    mentions,\n    isLoading,\n    error,\n    totalCount,\n    totalPages,\n    stats,\n\n    // Computed\n    totalMentions,\n    positiveMentions,\n    negativeMentions,\n    neutralMentions,\n\n    // Methods\n    fetchMentions,\n    retrySentiment,\n    \n    // Graph data\n    graphData,\n    availableKeywords\n  }\n}\n"],"names":["emit","__emit","changePage","page","useMentions","responseCache","ref","mentions","isLoading","error","totalCount","totalPages","stats","graphData","availableKeywords","totalMentions","computed","positiveMentions","negativeMentions","neutralMentions","filters","cacheKey","cached","response","axios","err","mentionId","index","m"],"mappings":"+YAQA,MAAMA,EAAOC,EAIb,SAASC,EAAWC,EAAc,CAChCH,EAAK,qBAAsBG,CAAI,CAAA,8qDC2B1B,SAASC,GAAc,CAE5B,MAAMC,EAAgBC,EAAQ,IAAA,GAG1B,EAEEC,EAAWD,EAAe,EAAE,EAC5BE,EAAYF,EAAI,EAAK,EACrBG,EAAQH,EAAmB,IAAI,EAC/BI,EAAaJ,EAAI,CAAC,EAClBK,EAAaL,EAAI,CAAC,EAGlBM,EAAQN,EAAI,CAChB,SAAU,EACV,SAAU,EACV,QAAS,EACT,SAAU,CAAA,CAAC,CACZ,EACKO,EAAYP,EAAsB,EAAE,EACpCQ,EAAoBR,EAAc,EAAE,EAGpCS,EAAgBC,EAAS,IAAMN,EAAW,KAAK,EAC/CO,EAAmBD,EAAS,IAAMJ,EAAM,MAAM,QAAQ,EACtDM,EAAmBF,EAAS,IAAMJ,EAAM,MAAM,QAAQ,EACtDO,EAAkBH,EAAS,IAAMJ,EAAM,MAAM,OAAO,EAc1D,OAAAL,EAAS,MAAQ,CAAC,EAmEX,CAEL,SAAAA,EACA,UAAAC,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,MAAAC,EAGA,cAAAG,EACA,iBAAAE,EACA,iBAAAC,EACA,gBAAAC,EAGA,cAhFoB,MAAOC,EAAuB,KAAO,CACnD,MAAAC,EAAW,KAAK,UAAUD,CAAO,EACjCE,EAASjB,EAAc,MAAM,IAAIgB,CAAQ,EAG3C,GAAAC,GAAU,KAAK,IAAI,EAAIA,EAAO,UAAY,EAAI,GAAK,IAAM,CAClDf,EAAA,MAAQe,EAAO,KAAK,QAClBZ,EAAA,MAAQY,EAAO,KAAK,MACpBX,EAAA,MAAQW,EAAO,KAAK,YACzBV,EAAA,MAAQU,EAAO,KAAK,MAChBT,EAAA,MAAQS,EAAO,KAAK,WACZR,EAAA,MAAQQ,EAAO,KAAK,MAAM,SAC5C,MAAA,CAGFd,EAAU,MAAQ,GAClBC,EAAM,MAAQ,KACV,GAAA,CACM,QAAA,IAAI,0BAA2BW,CAAO,EACxC,MAAAG,EAAW,MAAMC,EAAM,IAAuB,UAAW,CAAE,OAAQJ,EAAS,EAC1E,QAAA,IAAI,gBAAiBG,EAAS,IAAI,EAG5BlB,EAAA,MAAM,IAAIgB,EAAU,CAChC,KAAME,EAAS,KACf,UAAW,KAAK,IAAI,CAAA,CACrB,EAEQhB,EAAA,MAAQgB,EAAS,KAAK,QACpBb,EAAA,MAAQa,EAAS,KAAK,MACtBZ,EAAA,MAAQY,EAAS,KAAK,YAC3BX,EAAA,MAAQW,EAAS,KAAK,MAClBV,EAAA,MAAQU,EAAS,KAAK,WACdT,EAAA,MAAQS,EAAS,KAAK,MAAM,eACvCE,EAAK,CACZhB,EAAM,MAAQ,2BACN,QAAA,MAAM,2BAA4BgB,CAAG,CAAA,QAC7C,CACAjB,EAAU,MAAQ,EAAA,CAEtB,EAyCE,eAtCqB,MAAOkB,GAAsB,CAC9C,GAAA,CACF,MAAMH,EAAW,MAAMC,EAAM,KAAK,UAAUE,CAAS,mBAAmB,EAGlEC,EAAQpB,EAAS,MAAM,UAAeqB,GAAAA,EAAE,KAAOF,CAAS,EAC9D,OAAIC,IAAU,KACHpB,EAAA,MAAMoB,CAAK,EAAI,CACtB,GAAGpB,EAAS,MAAMoB,CAAK,EACvB,UAAWJ,EAAS,KAAK,UACzB,qBAAsBA,EAAS,KAAK,oBACtC,GAGKA,EAAS,WACTE,EAAK,CACJ,cAAA,MAAM,qCAAsCA,CAAG,EACjDA,CAAA,CAEV,EAsBE,UAAAZ,EACA,kBAAAC,CACF,CACF"}